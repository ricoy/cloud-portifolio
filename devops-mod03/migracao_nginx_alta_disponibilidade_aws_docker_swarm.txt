Migra√ß√£o de Webservers Nginx para Docker Containers com Alta Disponibilidade
na AWS usando Docker Swarm

‚ñ∫ Passo 01: Criando um reposit√≥rio na Amazon ECR (Elastic Container Registry)
[ Region: N. Virginia - us-east-1 ]

‚Ä¢ Reposit√≥rio: grandrestaraunt_nginx


‚ñ∫ Passo 02:  Criando 03 VMs EC2 e Instalando Docker via script

‚Ä¢ docker-01 (us-east-1a)

Ubuntu 22.04
t2.micro
Key: swarm-ssh
VPC: Default
Subnet: us-east-1a, us-east-1b and us-east-1c (each VM in different AZ)
Security Group (SG): default

Advanced details | User data: [ script to install Docker ]

#!/bin/bash
hostname -b node-01
curl -fsSL https://get.docker.com -o get-docker.sh
sh get-docker.sh
chmod 666 /var/run/docker.sock
echo 'ClientAliveInterval 60' | sudo tee --append /etc/ssh/sshd_config
sudo service ssh restart

Repita os mesmos passos para criar:
‚Ä¢ docker-02 (us-east-1b)
‚Ä¢ docker-03 (us-east-1c)

Configure a porta 22, 80 na SG 'default'


‚ñ∫ Passo 03: Criando 'Target Group' e 'ELB'

‚Ä¢ Target Group: swarm-tg
‚Ä¢ Elastic LB: swarm-elb

‚èπ

‚ñ∫ Passo 04: Creating a Dockerfile, Bulding and Pushing the Image to ECR

‚Ä¢ Downloading website files:

curl -O https://tcb-bootcamps.s3.amazonaws.com/bootcamp-devops-cloud/pt/tcb-bdc-module3-hop.zip
unzip tcb-bdc-module3-hop.zip
cd bdc-module3-project/


‚Ä¢ Creating a Dockerfile:

touch Dockerfile
vi Dockerfile

FROM nginx:1.22.0
COPY website /usr/share/nginx/html

‚Ä¢ Building a Docker Image

docker build -t grandrestaraunt_nginx .
docker images

‚Ä¢ Pushing the image created to your AWS ECR repository

docker push [ Your Repository URI ]

docker push 937193033886.dkr.ecr.us-east-1.amazonaws.com/grandrestaraunt_nginx

‚Ä¢ Install AWS CLI:
sudo apt install awscli

‚Ä¢ Creating a programatic user:
Name: swarm-cli
Police: EC2InstanceProfileForImageBuilderECRContainerBuilds

‚èπ

‚ñ∫ Passo 05: Configurando VM 'docker-01' como 'Manager'

docker swarm init --advertise-addr <manager_ip> [ IP Privado da EC2 'docker-01' ]

docker swarm init --advertise-addr 172.31.14.67

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Voc√™ pode usar estes comandos abaixo para pegar os tokens do 'Managers' e 'Workers':
‚Ä¢ To get 'Manager' token: docker swarm join-token manager
‚Ä¢ To get 'Worker' token: docker swarm join-token worker
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

‚ñ∫ Passo 06: Adicionando Worker Nodes no Swarm

Copie o token fornceido pelo 'Manager' e execute na VM 'docker-02' e 'docker-03'


‚ñ∫ Passo 07: Visualizando Status do Swarm

docker node ls
docker network ls

‚ñ∫ Passo 08: Criando um Servi√ßo Swarm

Antes, vamos checar os 'nodes':

'docker ps' 'docker images' 'docker network ls'

docker service create -p 80:80 --name swarm-web --with-registry-auth [ Your Repo URI ]

docker service ls
docker service ps <service-name or service-id>

'docker ps' 'docker images'

‚ñ∫ Testando IP P√∫blico da VM docker-01

‚ñ∫ Passo 09: Escalando o servi√ßo do Swarm

docker service ls
docker service ps <service-name or service-id>
docker service scale swarm-web=3
docker service ls
docker service ps <service-name or service-id>

'docker ps' 'docker images'

‚ñ∫ Passo 10: Testando IP P√∫blico do 'docker-02' e 'docker-03'

‚èπ


‚ñ∫ Passo 11: Testando ELB

‚ñ∫ Passo 12: Checando as informa√ß√µes do Swarm

docker info

Quantos n√≥s?
Quantos Manger/Nodes?
Qual N√≥ √© Managar?
Qual IP do Manager?
Qual a vers√£o do SO?


‚ñ∫ Passo 13: Testando 'HA' no n√≠vel do Container

Escolha um 'worker node' e execute 'docker rm' (remove container)

docker ps
docker rm id -f [ necess√°rio usar a flag --force ]

docker ps
docker ps
docker ps  [ novo container criado automaticamente! ]

docker service ls
docker service ps <service-name or service-id>


‚ñ∫ Passo 14: Atualizando o 'Manager' para n√£o receber tarefas!

docker ps
docker node ls

docker node update --availability drain  <node-id>

docker node ls [ status 'drain' ]

docker ps [ nada ]


‚ñ∫ docker node ps [ shutdown status]

docker service ls
docker service ps <service-name or service-id>


‚ñ∫ Passo 15: Testando 'HA' no n√≠vel do EC2/VM

Parando uma EC2 para testar a 'HA' do ELB
docker node ls                                  | 'Template Evidence'
docker service ps <service-name or service-id>  | 'Template Evidence'

___________________________________________________________________________________

Que tal reiniciar a EC2 que paramos?
E o node 'Manager'? Como fazer para voltar a receber tarefas?
Ser√° que existe alguma forma para atualizar/re-balancear o servi√ßo do Swarm?

Voc√™ sabe como?

Compartilhe comigo!

üê≥ ZG9ja2VyIHNlcnZpY2UgdXBkYXRlIC0tZm9yY2UgPHNlcnZpY2UtaWQ+

--------------
Removendo 'nodes':
‚ñ∫ 'docker swarm leave' from workers node;
‚ñ∫ 'docker node ls' the node that left the Swarm will have a 'Down' status!
‚ñ∫ 'docker node rm [node-id]' it will Remove the node from Swarm!
‚ñ∫ 'docker swarm leave -f' you must use '-f' to remove a Manager node from Swarm!

---------------------
Project's References:

https://aws.amazon.com/blogs/containers/migrating-from-docker-swarm-to-amazon-ecs-with-docker-compose/
https://docs.aws.amazon.com/AmazonECR/latest/userguide/getting-started-cli.html
https://caylent.com/blog/docker/high-availability-docker-swarm-aws
https://www.nginx.com/blog/deploying-nginx-nginx-plus-docker/
https://hub.docker.com/_/nginx (edited)

TCB



