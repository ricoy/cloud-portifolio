# 3 **| Implementa√ß√£o do Projeto Hands on - Solu√ß√£o**

### Aten√ß√£o!!!

### Essa documenta√ß√£o √© constantemente revisada e atualizada conforme mudan√ßas que ocorrem a todo momento nos provedores de cloud, que consequentemente afetam nossos hands-ons, e, em muitos casos, apenas alguns comandos s√£o necess√°rios atualiza√ß√£o/adi√ß√£o. Sendo assim, √© crucial e obrigat√≥rio, durante a implementa√ß√£o dos projetos, o acompanhamento com a ‚ÄòDocumenta√ß√£o de Solu√ß√£o‚Äô que cont√©m os passos e os comandos necess√°rios, e atualizados!

## **Parte 1:** Criar uma VM e testar acesso via Cloud Shell

### Cria√ß√£o da Virtual Machine (VM)

Instance details

- Resource Group: `multicloud-event`
- Virtual machine name: `jumpserver`
- Region: `(US)East US`
- Image: `Ubuntu Server 22.04 LTS (free services eligible)`
- Size: `Standard_B1s`

Administrator account

- Authentication type: `SSH`
- Username: `azureuser`
- Key pair name: `jumpserver_key`

No processo de cria√ß√£o, voc√™ ser√° solicitado salvar o arquivo da chave SSH, sugerimos:

- Criar uma pasta: "c:\Azure\Mod. 3\" para salvar os arquivos deste m√≥dulo.

Inbound port rules

- Public inbound ports: `Allow selected ports`
- Select inbound ports: `SSH (22)`

> ‚ÄúNext‚Äù para demais configura√ß√µes
‚ÄùReview + create‚Äù
Create
> 

‚ÄúDownload private key‚Äù

*Acesse a VM criada, explore os detalhes do recurso.*

### Acessando a VM via Cloud Shell

- Cloud Shell

```bash
You have no storage mounted
Azure Cloud Shell requires an Azure file share to persist files.
```

> Create storage
> 

```bash
**ls
cat /etc/*rel***
```

- Upload do arquivo da sua chave SSH.

```bash
**ls -la jumpserver_key.pem
ssh -i jumpserver_key.pem azureuser@your-vm-public-ip**
```

> WARNING: UNPROTECTED PRIVATE KEY FILE!
Permiss√µes muito "abertas".
> 

```
**chmod 400 jumpserver_key.pem
ls -la jumpserver_key.pem

ssh -i jumpserver_key.pem azureuser@your-vm-public-ip

cat /etc/*rel***
```

## Parte 2 - Atualizar a VM, Instalar Docker, Docker Compose e Testar a Aplica√ß√£o

### Atualizar a Lista de Pacotes da VM

`**sudo apt update**`

### Instalar Unzip / Docker / Docker Compose

```
**sudo apt install unzip
sudo apt install docker.io -y**
```

```
**sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose**
```

```
**sudo chmod +x /usr/local/bin/docker-compose

sudo systemctl start docker

docker -v**
```

### Baixar e Descompactar conte√∫do da Aplica√ß√£o

**Op√ß√£o 1**

Baixar o arquivo para sua m√°quina, fazer upload para o Cloud Shell e transferir para a VM

[tcb-voting-app.zip](https://prod-files-secure.s3.us-west-2.amazonaws.com/0d1b678b-cd91-4256-93c7-73b2e82396d5/4e5013af-8dae-4ce5-890b-bf49a0a3e582/tcb-voting-app.zip)

No Cloud Shell, execute o comando abaixo:

`**scp -i jumpserver_key.pem tcb-voting-app.zip [azureuser@your-vm-public-ip](mailto:azureuser@20.121.47.52):/home/azureuser**`

**Op√ß√£o 2**

Baixar o arquivo direto na VM:

```
**wget https://tcb-bootcamps.s3.amazonaws.com/bootcamp-microsoft-azure/mod3/tcb-voting-app.zip

unzip tcb-voting-app.zip**
```

### Subir e Validar a aplica√ß√£o com Docker Compose

```
**cd tcb-voting-app
ls -ltr

nano docker-compose.yaml

sudo docker-compose up -d**
```

[ Explica√ß√£o Docker Compose ]

```
Creating tcb-vote-back  ... done
Creating tcb-vote-front ... done
```

### Listando as Imagens

`**sudo docker images**`

```
thecloudbootcamp/tcb-vote    latest
tiangolo/uwsgi-nginx-flask   python3.6
thecloudbootcamp/redis       6.0.8
```

### Listando os Containers

`**sudo docker ps -a**`

```
thecloudbootcamp/redis:6.0.8      tcb-vote-back
thecloudbootcamp/tcb-vote:latest  tcb-vote-front
```

### Configurar porta 8080 para acesso √† aplica√ß√£o

- VM, Networking, Network settings
- `Create port rule`
- `Inbound port rule`
- Destination port ranges: `8080`

> Add
> 

### Teste de Acesso √† Aplica√ß√£o

- [http://your-vm-public-ip:8080](http://your-vm-public-ip:8080/)

Conclu√≠mos at√© esse ponto de que os arquivos para fazer deploy da aplica√ß√£o est√£o funcionando conforme esperado. Faremos nos pr√≥ximos passos, o deploy usando o servi√ßo do AKS!

## Parte 3 - Instalar Azure CLI, Criar e Configurar ACR/AKS

### Stop na aplica√ß√£o que subimos para valida√ß√£o com Docker Compose

`sudo docker-compose down`

### Instalar Azure CLI

```bash
**curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

az -v**
```

...enquanto instala, validar ACR e AKS criados.

### Login Azure CLI

`sudo az login`

> Seguir passos para autentica√ß√£o via browser.
> 

### Criar Azure Container Registry (ACR)

```
**sudo az group create --name tcb-vote --location eastus**

**sudo az acr create --resource-group tcb-vote --name tcbherbertpereira --sku Basic**
```

```
Caso essa mensagem seja, apresentada, n√£o se preocupe:

Resource provider 'Microsoft.ContainerRegistry' used by this operation is not registered. We are registering for you. Registration succeeded.
```

Copie o ‚ÄúLogin Server‚Äù do seu ACR:

"loginServer": "**tcbherbertpereira.azurecr.io**",

### Login no Azure Container Registries

`**sudo az acr login --name tcbherbertpereira**`

### Listar Azure Container Registries

```bash
**sudo az acr list --resource-group tcb-vote --query "[].{acrLoginServer:loginServer}" --output table**
```

### Configurar Tag e Fazer upload da imagem para o ACR

```bash
**sudo docker images

sudo docker tag thecloudbootcamp/tcb-vote:latest tcbherbertpereira.azurecr.io/tcb-vote:latest

sudo docker images

*Upload*

sudo docker push tcbherbertpereira.azurecr.io/tcb-vote:latest

Listar images do Azure Container Registry (ACR):

sudo az acr repository list --name tcbherbertpereira.azurecr.io --output table**

```

### Criar Cluster no Azure Kubernetes Service (AKS)

```bash
**sudo az aks create \
--resource-group tcb-vote \
--name AKSClusterTCB \
--node-count 1 \
--generate-ssh-keys \
--attach-acr tcbherbertpereira**
```

[ Pause: 5 ~ 10 min ]

### Instalar o ‚ÄòKubectl‚Äô

`**sudo az aks install-cli**`

### Configurar as credenciais para logar no Cluster

`**sudo az aks get-credentials --resource-group tcb-vote --name AKSClusterTCB**`

```bash
Merged "AKSClusterTCB" as current context in /root/.kube/config
```

### Testar as permiss√µes

`**sudo kubectl get nodes**`

### Editar as Informa√ß√µes para o Deployment

`**sudo nano tcb-vote-plus-redis.yaml**`

```bash
Editar se√ß√£o:
kind: Deployment
...
Containers:
name: tcb-vote-front
image: thecloudbootcamp/tcb-vote:latest

**Para:**
image: **tcbherbertpereira.azurecr.io**/tcb-vote:latest
```

### Deploy da Aplica√ß√£o

`**sudo kubectl apply -f tcb-vote-plus-redis.yaml**`

### Obter IP P√∫blico do LB

`**sudo kubectl get service --watch**`

`**sudo kubectl get service**`

### Mais comandos ‚Äòkubectl‚Äô

```bash
**sudo kubectl get nodes
sudo kubectl get pods
sudo kubectl get all**
```

### Testar Acesso √† Aplica√ß√£o via IP P√∫blico do LB - Porta 80

### Cria√ß√£o QR Code

https://www.the-qrcode-generator.com/

## Evid√™ncias do Projeto

- IP do Load Balancer (Cluster/Services)

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/0d1b678b-cd91-4256-93c7-73b2e82396d5/f2d73974-b291-4d3b-8a11-25c44bbeb1e6/Untitled.png)

- Acesso √† aplica√ß√£o com IP do LB:

![Untitled](https://prod-files-secure.s3.us-west-2.amazonaws.com/0d1b678b-cd91-4256-93c7-73b2e82396d5/4cf8eba2-669c-4db5-862a-a14f0ed7d22d/Untitled.png)

### Remo√ß√£o dos Recursos Criados

Excluir os Resources Groups:

- `multicloud-event`
- `tcb-vote`

***Um ‚ÄòRG‚Äô extra foi criado, e ser√° exclu√≠do automaticamente!***

***TCB*** üöÄ